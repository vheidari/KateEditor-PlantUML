/'
 View -> Code Folding > Toggle Current Node
 
 This is a Multiple commant line:
 line one
 line two
 line three
 line four
 line five
'/

' one line comment 

@startuml

class Foo <<Bar>> {
  You can use
  several lines
  .. 
  As you want
  and group
  == 
  things together.
  -- 
  You can have as many
  groups as you want.
  -- 
  +publicMethod()
  -privateMethod()
  #protectedMethod()
  End of class
}

class Bar {
  note: This is a class
  .. Hello foo .. 
  +public
  .. Private things prefixed with - .. 
  -private
  #protected
  int foo
  String password
}

interface IBar {
  int a
  int b
  -- 
  +public()
  -private()
}

Foo --> Bar
IBar --> Foo
IBar --> Bar

@enduml


@startuml
User -> (Start)
User --> (Use the application) : A small label
:Main Admin: ---> (Use the application) : This is\nyet another\nlabel
@enduml

@startuml
(Use case 1) <.. :user:
(Use case 2) <- :user:
@enduml



@startuml
abstract        abstract
abstract class  "abstract class"
annotation      annotation
circle          circle
()              circle_short_form
class           class
class           class_stereo <<stereotype>> 
diamond         diamond
<>              diamond_short_form
entity          entity
enum            enum
exception       exception
interface       interface
metaclass       metaclass
protocol        protocol
stereotype      stereotype
struct          struct

@enduml


@startuml
Class01 <|-- Class02
Class03 *-- Class04
Class05 o-- Class06
Class07 .. Class08
Class09 -- Class10
@enduml


@startuml
Class11 <|.. Class12
Class13 --> Class14
Class15 ..> Class16
Class17 ..|> Class18
Class19 <--* Class20
@enduml


@startuml
Class21 #-- Class22
Class23 x-- Class24
Class25 }-- Class26
Class27 +-- Class28
Class29 ^-- Class30
@enduml


@startuml

Class01 "1" *-- "many" Class02 : contains

Class03 o-- Class04 : aggregation

Class05 --> "1" Class06

@enduml


@startuml
class Car

Driver - Car : drives >
Car *- Wheel : have 4 >
Car -- Person : < owns

@enduml


@startuml
class "This is my class" as class1
class class2 as "It works this way too"

class2 *-- "foo/dummy" : use
@enduml


@startuml
class $C1
class $C2 $C2
class "$C2" as dollarC2
remove $C1
remove $C2
remove dollarC2
hide $C1
@enduml



@startuml
Object <|-- ArrayList

Object : equals()
ArrayList : Object[] elementData
ArrayList : size()

@enduml



@startuml
class Dummy {
  String data
  void methods()
}

class Flight {
   flightNumber : Integer
   departureTime : Date
}
@enduml



@startuml
class Dummy {
  { field } A field ( despite parentheses ) 
  { method } Some method
}

@enduml


@startuml

class Dummy {
 -field1
 #field2
 ~method1()
 +method2()
}

@enduml



@startuml
skinparam classAttributeIconSize 0
class Dummy {
 -field1
 #field2
 ~method1()
 +method2()
}

@enduml


@startuml
class Dummy {
 field1
 field2
 method1()
 method2()
}
@enduml

@startuml
class Dummy {
 field1
 \~Dummy()
 method1()
}

@enduml



@startuml
class Dummy {
  { static } String id
  { abstract } void methods()
}
@enduml


@startuml
class Foo1 {
  You can use
  several lines
  .. 
  as you want
  and group
  == 
  things together.
  __ 
  You can have as many groups
  as you want
  -- 
  End of class
}



class User {
  .. Simple Getter .. 
  + getName()
  + getAddress()
  .. Some setter .. 
  + setName()
  __ private data __ 
  int age
  -- encrypted -- 
  String password
}

@enduml


@startuml
class Object << general >> 
Object <|--- ArrayList

note top of Object : In java, every class\nextends this one.

note "This is a floating note" as N1
note "This note is connected\nto several objects." as N2
Object .. N2
N2 .. ArrayList

class Foo
note left : On last defined class

@enduml


@startuml

class Foo
note left : On last defined class

note top of Foo
  In java, <size:18>every</size> <u>class</u>
  <b>extends</b>
  <i>this</i> one.
end note

note as N1
  This note is <u>also</u>
  <b><color:royalBlue>on several</color>
  <s>words</s> lines
  And this is hosted by <img:sourceforge.jpg>
end note

@enduml


@startuml
class A {
+void { static } int counter
+void { abstract } start(int timeout)
}
note right of A::counter
  This member is annotated
end note
note right of A::start
  This method is now explained in a UML note
end note
@enduml








